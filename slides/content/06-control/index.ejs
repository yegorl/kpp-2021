<section>
  <h1>Керування</h1>
</section>

<section>
  <h2>Умови</h2>

  <section>
    <p>Дозволяють виконувати чи не виконувати код в залежності від певної умови</p>
  </section>

  <section>
    <h3>if...else</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
let x = 0;
let i = 0;

if (x &gt; 0) {
  i++;
} else {
  i--;
}

i; //=&gt; -1
    </code></pre>
  </section>

  <section>
    <h3>Тернарний оператор</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
const mark = labs_count == 4 ? 'відмінно' : 'таке';
    </code></pre>
  </section>

  <section>
    <h3>switch</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
switch (student.group) {
  case '1КН-19б':
  case '2КН-19б':
  case '3КН-19б':
    console.log('Вам необхідно здати 4 лаби');
    break;
  case '1КН-19мс':
    console.log('Вам необхідно здати 2 лаби');
    break;
  default:
    console.log('Вам немає потреби нічого здавати');
}
    </code></pre>
  </section>
</section>

<section>
  <h2>Цикли</h2>

  <section>
    <p>Дозволяють виконувати інструкції певну кількість разів. Одине виконання називається - <strong>ітерація</strong></p>
  </section>

  <section>
    <h3>while</h3>

    <p>Виконує блок коду поки умова правдива. Якщо умова одразу неправдива, не виконується жодного разу</p>

    <pre><code class="javascript hljs" data-trim contenteditable>
let i = 0;

while (i &lt; 5) {
  i++;
}

i; //=&gt; 5
    </code></pre>
  </section>

  <section>
    <h3>do..while</h3>

    <p>Виконує блок коду поки умова правдива. Навть якщо умова одразу неправдива, виконується принаймні один раз</p>

    <pre><code class="javascript hljs" data-trim contenteditable>
let i = 0;

do {
  i++;
} while (i &gt; 5);

i; //=&gt; 1
    </code></pre>
  </section>

  <section>
    <h3>for</h3>

    <p>Скорочений запис циклу що виконується конкретну кількість разів. Складається з трьох частин `for (ініціалізація; умова; зміна)`</p>

    <pre><code class="javascript hljs" data-trim contenteditable>
for (let i = 0; i &lt; 5; i++) {
  // ...код...
}
    </code></pre>
  </section>

  <section>
    <h3>break</h3>

    <p>Дозволяє передчасно вийти з цикла</p>

    <pre><code class="javascript hljs" data-trim contenteditable>
let i = 0;

while (true) {
  if (i++ &gt; 5) {
    break;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>continue</h3>

    <p>Дозволяє передчасно перейти до наступної ітерації</p>

    <pre><code class="javascript hljs" data-trim contenteditable>
let i = 0;
while (++i &lt; 5) {
  if (i % 2 == 0) {
    continue;
  }

  console.log(i);
}

//&gt; 1
//&gt; 3
    </code></pre>
  </section>
</section>

<section>
  <h2>Виключення</h2>

  <section>
    <h3>try, catch</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
try {
  someRiskyOperation();
} catch (e) {
  handleException(e);
}
    </code></pre>
  </section>

  <section>
    <h3>finally</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
try {
  someRiskyOperation();
} catch (e) {
  handleException(e);
} finally {
  cleanup();
}
    </code></pre>
  </section>

  <section>
    <h3>throw</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
try {
  throw 'My error';
} catch (e) {
  console.log(e); //&gt; My error
}
    </code></pre>
  </section>

  <section>
    <h3>Optional catch binding <small>ES2019</small></h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
try {
  throw 'My error';
} catch {
  console.log(e);
}
    </code></pre>
  </section>

  <section>
    <h3>Помилки</h3>

    <dl>
      <dt>EvalError</dt><dd>помилка під час виконання коду за допомогою eval</dd>
      <dt>SyntaxError</dt><dd>помилка під час розбору коду під час виклика eval</dd>
      <dt>InternalError</dt><dd>внутрішня помилка рушія (зазвичай чогось забагато)</dd>
      <dt>RangeError</dt><dd>вихід за границі масива або стека</dd>
      <dt>TypeError</dt><dd>невірний тип аргументу</dd>
      <dt>URIError</dt><dd>помилка під час encodeURI() або decodeURI()</dd>
    </dl>
  </section>

  <section>
    <h3>Обробка помилок за типом</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
try {
  someRiskyOperation();
} catch (e) {
  if (e instanceof TypeError) {
    // ...
  } else if (e instanceOf RangeError) {
    // ...
  } else {
    throw e;
  }
}
    </code></pre>
  </section>
</section>

<section>
  <h2>Особливі</h2>

  <section>
    <h3>with</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
var obj = {
  a: 1,
  b: 2,
};

obj.a = 2;
obj.b = 3;
obj.c = 4;

with (obj) {
  a = 3;
  b = 4;
  c = 5;
}
    </code></pre>
  </section>

  <section>
    <h3>with (не використовуйте)</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
function foo(obj) {
  with (obj) {
    a = 2;
  }
}

var o1 = { a: 3 };
var o2 = { b: 3 };

foo(o1);
console.log(o1.a); //&gt; 2

foo(o2);
console.log(o2.a); //&gt; undefined
console.log(a); //&gt; 2 - leaked global!
    </code></pre>
  </section>
</section>

<section>
  <h2>Питання?</h2>
</section>
