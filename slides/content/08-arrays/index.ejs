<section>
  <h1>Масиви</h1>
</section>

<section>
  <h2>Масиви</h2>

  <section>
    <h3>Створення</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
[1, 2, 3]
    </code></pre>

    <pre><code class="javascript hljs" data-trim contenteditable>
new Array(1, 2, 3) //=&gt; [1, 2, 3]

new Array(3) //=&gt; [undefined, undefined, undefined]
    </code></pre>
  </section>

  <section>
    <h3>Отримання елемента за індексом</h3>

    <pre><code class="javascript" data-trim>
const arr = [1, 2, 3]
arr[0] //=&gt; 1
    </code></pre>
  </section>

  <section>
    <h3>for..in</h3>

    <p>Для обходу масивів (не використовується, замінений на for..of)</p>

    <pre><code class="javascript hljs" data-trim contenteditable>
const arr = ['a', 'b', 'c'];
for (let index in arr) {
  console.log(index)
}
//&gt; 1
//&gt; 2
//&gt; 3
    </code></pre>
  </section>

  <section>
    <h3>Перетворення на рядок</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
[1, 2, 3].toString() //=&gt; "1,2,3"

[1, 2, 3].join() //=&gt; "123"

[1, 2, 3].join('_') //=&gt; "1_2_3"
    </code></pre>
  </section>

  <section>
    <h3>Вирізання фрагменту</h3>

    <p>Змінює вихідний масив</p>

    <pre><code class="javascript hljs" data-trim contenteditable>
let arr = [1, 2, 3, 4]
arr.splice(1, 2) //=&gt; [2, 3]
arr //=&gt; [1, 4]
    </code></pre>
  </section>

  <section>
    <h3>every/some</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
const arr = [1, 2, 3];
arr.some(e =&gt; e === 2); //=&gt; true
arr.every(e =&gt; e === 2); //=&gt; false
    </code></pre>
  </section>

  <section>
    <h3>map</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
let arr = [1, 2, 3];
arr = arr.map(e =&gt; e * 2);
arr; //=&gt; 2, 4, 6
    </code></pre>
  </section>

  <section>
    <h3>reduce</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
const arr = [1, 2, 3];
arr.reduce((acc, e) =&gt; acc + e); //=&gt; 6
    </code></pre>
  </section>

  <section>
    <h3>find</h3>

    <p>Пошук</p>

    <pre><code class="javascript" data-trim>
[1, 2, 3].find((e) =&gt; e % 2 === 0) //=&gt; 2
    </code></pre>
  </section>

  <section>
    <h3>findIndex</h3>

    <p>Пошук індекса</p>

    <pre><code class="javascript" data-trim>
[1, 2, 3].findIndex((e) =&gt; e % 2 === 0) //=&gt; 1
    </code></pre>
  </section>
</section>

<section>
  <h2>Стандартна бібліотека</h2>

  <section>
    <h3>slice</h3>

    <p>Вирізання частини</p>

    <pre><code class="javascript" data-trim>
const fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
fruits.slice(1, 3); //=&gt; ["Orange", "Lemon"]

const fruit = 'Banana';
fruit.slice(1, 3); //=&gt; "an"
    </code></pre>
  </section>

  <section>
    <h3>concat</h3>

    <p>Об'єднання</p>

    <pre><code class="javascript" data-trim>
[1, 2].concat([3, 4]) //=&gt; [1, 2, 3, 4]

'12'.concat('34') //=&gt; 1234
    </code></pre>
  </section>

  <section>
    <h3>indexOf</h3>

    <p>Пошук індекса за елементом</p>

    <pre><code class="javascript" data-trim>
['a', 'b', 'c'].indexOf('b') //=&gt; 1

'abc'.indexOf('c') //=&gt; 2
    </code></pre>
  </section>
</section>

<section>
  <h2>Ітератори</h2>

  <section>
    <pre><code class="hljs javascript" data-trim contenteditable>
const array = [1, 2, 3];

// Ітеруюча функція
const newIterator = array[Symbol.iterator];

// Створення нового ітератора
const iterator = newIterator();

// Розгортування ітератора
iterator.next() //=&gt; {value: 1, done: false}
iterator.next() //=&gt; {value: 2, done: false}
iterator.next() //=&gt; {value: 3, done: false}
iterator.next() //=&gt; {value: undefined, done: true}
    </code></pre>
  </section>

  <section>
    <h3>Конкуруючі ітератори</h3>

    <pre><code class="hljs javascript" data-trim contenteditable>
const array = [1, 2, 3];
const newIterator = array[Symbol.iterator];

const iterator = newIterator();
iterator.next() //=&gt; {value: 1, done: false}
iterator.next() //=&gt; {value: 2, done: false}
iterator.next() //=&gt; {value: 3, done: false}
iterator.next() //=&gt; {value: undefined, done: true}

const iterator1 = newIterator();
iterator1.next() //=&gt; {value: 1, done: false}
    </code></pre>
  </section>

  <section>
    <h3>Створення ітеруючої функції</h3>

    <pre><code class="hljs javascript" data-trim contenteditable>
const obj = {};
obj[Symbol.iterator] = function() {
  return {
    counter: 0,
    done: false,
    next: function() {
      if (this.counter &lt; 3) {
        this.counter++;
        return { value: this.counter };
      } else {
        return { done: true };
      }
    }
  };
};
    </code></pre>
  </section>

  <section>
    <h3>for..of</h3>

    <pre><code class="hljs javascript" data-trim contenteditable>
for (let e of obj) {
  console.log(e);
}
//&gt; 1
//&gt; 2
//&gt; 3
    </code></pre>

    <p>Приймає будь-який об'єкт у якого є властивість <i>Symbol.iterator</i>.</p>
  </section>

  <section>
    <h3>spread (...)</h3>

    <pre><code class="hljs javascript" data-trim contenteditable>
[...obj]; //=&gt; [1, 2, 3]
    </code></pre>

    <p>Приймає будь-який об'єкт у якого є властивість <i>Symbol.iterator</i>.</p>
  </section>

  <section>
    <h3>Протоколи Ітераторів</h3>

    <pre><code class="hljs javascript" data-trim contenteditable>
interface Iterable {
  [Symbol.iterator]() : Iterator;
}
interface Iterator {
  next() : IteratorResult;
  return?(value? : any) : IteratorResult;
}
interface IteratorResult {
  value : any;
  done : boolean;
}
    </code></pre>

    <p>Iterator зазвичай також реалізує Iterable і повертає себе.</p>
  </section>
</section>

<section>
  <h2>Питання?</h2>
</section>
