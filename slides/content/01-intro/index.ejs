<section>
  <h1>Вступ</h1>
  <h2>Лекція 1</h2>
</section>

<section>
  <h2>Крос-платформне програмування</h2>

  <section>
    <h3>Це написання коду що може бути виконаний на різних платформах.</h3>
  </section>

  <section>
    <h3>Основа курсу - мова JavaScript.</h3>
  </section>
</section>

<section>
  <h2>Чому JavaScript?</h2>

  <section>
    <h3>JavaScript у Браузері</h3>

    <h4>Єдина доступна мова</h4>
  </section>

  <section>
    <h3>JavaScript на Мобільних</h3>

    <img src="images/javascript-mobile.gif" />
  </section>

  <section>
    <h3>JavaScript на Робочому столі</h3>

    <img src="images/javascript-desktop.gif" />
  </section>

  <section>
    <h3>JavaScript у Віртуальній реальності</h3>

    <img src="images/javascript-virtual-reality.gif" />
  </section>

  <section>
    <h3>JavaScript на Пристроях</h3>

    <img src="images/javascript-hardware.gif" />
  </section>

  <section>
    <h3>JavaScript ...</h3>

    <ul>
      <li>в Базах Даних</li>
      <li>в Терміналі</li>
      <li>на Сервері</li>
      <li>в Іграх</li>
      <li>...</li>
    </ul>
  </section>
</section>

<section>
  <h2>Що таке JavaScript?</h2>

  <section>
    <p><strong>JavaScript</strong> - високорівнева, інтерпретована мова програмування що керується специфікацією ECMAScript. Її характеризують, як динамічну, слабко типізовану, прототипну і мультипарадигмальну.</p>
  </section>

  <section>
    <p><strong>Високорівнева</strong> - нам не доведеться керувати пам'яттю та іншими апаратними ресурсами.</p>

    <small>На противагу мові C або мові асемблеру, що потребують безпосереднього керування пам'яттю і тому вважаються <i>низькорівневими</i>.</small>
  </section>

  <section>
    <p><strong>Iнтерпретована</strong> - немає необхідності компілювати перед запуском, перетворенням программи у машинні коди займається спеціальна програма <i>Інтерпретатор</i>, що починає свою роботу під час запуску програми.</p>

    <small>На противагу мові C або Haskell, що потребують попередньої компіляції і тому називаються <i>компільованими</i>.</small>
  </section>

  <section>
    <p><strong>Динамічна</strong> - дозволяє визначати типи даних і здійснювати синтаксичний аналіз і компіляцію «на льоту», безпосередньо на етапі виконання.</p>

    <small>На противагу <i>статичним</i> мовам C++ або Java, що потребують визначення типів заздалегідь.</small>
  </section>

  <section>
    <p><strong>Слабко типізована</strong> - за рахунок можливості неявного приведення типів.</p>

    <small>На противагу мовам із <i>сильною типізацією</i>, таким як Python або Java, що не дозволяють неявного приведення типів.</small>
  </section>

  <section>
    <p><strong>Прототипна</strong> - що використовує Прототипи (замість Класів), як основу для Об'єктно-Орієнтованого Програмування.</p>

    <small>На противагу мовам C++ та Java що використовую Класи, як основу для ООП.</small>
  </section>

  <section>
    <p><strong>Мультипарадигмальна</strong> - що використовує різні парадигми, як засади до створення мови.</p>

    <ul>
      <li><strong>Процедурна</strong> - програми будуються на основі Процедур та Функцій;</li>
      <li><strong>Об'єктно-Орієнована</strong> - реалізує ООП на базі Прототипів;</li>
      <li><strong>Функціональна</strong> - Функції першого класу та Функції вищих порядків.</li>
    </ul>
  </section>
</section>

<section>
  <h2>Основи</h2>

  <section>
    <h3>Дані</h3>

    <ul>
      <li>Число: 42, 123.12</li>
      <li>Рядок: 'Hello1', "Word!"</li>
      <li>Логічні: true, false</li>
    </ul>
  </section>

  <section>
    <h3>Пусті типи даних</h3>

    <ul>
      <li><b>null</b> - Нуль. Якщо значення визначене але пусте</li>
      <li><b>undefined</b> - Якщо значення не визначене</li>
    </ul>

    <img src="images/null-undefined.png" />
  </section>

  <section>
    <h3>Вирази (expressions)</h3>

    <p>Набір даних та операторів що повертає значення (обраховується та підставляє на своє місце).</p>

    <i>Приклад: 3 + 4 * 5</i>
  </section>

  <section>
    <h3>Інструкції (statement)</h3>

    <p>Один або декілька виразів, що закінчується на `;`.</p>
    <p><i>`;` можна опускати але це може іноді призводити до неочікуванних наслідків</i></p>
  </section>

  <section>
    <h3>Змінні</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
let a = 4;
    </code></pre>
  </section>

  <section>
    <h3>Умови</h3>

    <pre><code class="javascript hljs" data-trim contenteditable>
let x = 0;
let i = 0;

if (x &gt; 0) {
  i++;
} else {
  i--;
}

i; //=&gt; -1
    </code></pre>
  </section>

  <section>
    <h2>Цикли</h2>

    <pre><code class="javascript hljs" data-trim contenteditable>
let i = 0;

while (i &lt; 5) {
  i++;
}

i; //=&gt; 5
    </code></pre>

    <pre><code class="javascript hljs" data-trim contenteditable>
for (let i = 0; i &lt; 5; i++) {
  // ...код...
}
    </code></pre>
  </section>

  <section>
    <h2>Коментарі</h2>

    <pre><code class="javascript hljs" data-trim contenteditable>
// Це коментар

/*
 * А це
 *   багатостроковий
 * коментар
 */
    </code></pre>
  </section>
</section>

<section>
  <h2>Питання?</h2>
</section>
